from typing import Any, TypedDict

from .lib import _Weakrefable

class _Statistics(TypedDict):
    has_min_max: bool
    min: Any | None
    max: Any | None
    null_count: int | None
    distinct_count: int | None
    num_values: int
    physical_type: str

class Statistics(_Weakrefable):
    def to_dict(self) -> _Statistics: ...
    def equals(self, other: Statistics) -> bool: ...
    @property
    def has_min_max(self) -> bool: ...
    @property
    def hash_null_count(self) -> bool: ...
    @property
    def has_distinct_count(self) -> bool: ...
    @property
    def min_raw(self) -> Any | None: ...
    @property
    def max_raw(self) -> Any | None: ...
    @property
    def min(self) -> Any | None: ...
    @property
    def max(self) -> Any | None: ...
    @property
    def null_count(self) -> int | None: ...
    @property
    def distinct_count(self) -> int | None: ...
    @property
    def num_values(self) -> int: ...
    @property
    def physical_type(self) -> str: ...
    @property
    def logical_type(self) -> ParquetLogicalType: ...
    @property
    def converted_type(self) -> str | None: ...

class ParquetLogicalType(_Weakrefable): ...
class FileMetaData: ...
class FileDecryptionProperties: ...
