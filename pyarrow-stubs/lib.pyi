from dataclasses import dataclass, field
from enum import IntFlag, auto
from os import PathLike
from typing import Literal, NamedTuple, Self, TypeAlias, overload

from ._stubs_typing import Buffer as BufferProtocol

class MetaDataVersion(IntFlag):
    V1 = auto()
    V2 = auto()
    V3 = auto()
    V4 = auto()
    V5 = auto()

class _Weakrefable: ...

class MonthDayNano(NamedTuple):
    days: int
    months: int
    nanoseconds: int

@dataclass(kw_only=True, slots=True)
class IpcWriteOptions(_Weakrefable):
    metadata_version: MetaDataVersion = field(default=MetaDataVersion.V5, kw_only=False)
    allow_64bit: bool = False
    use_legacy_format: bool = False
    compression: Literal["lz4", "zstd"] | Codec | None = None
    use_threads: bool = True
    emit_dictionary_deltas: bool = False
    unify_dictionaries: bool = False

@dataclass(kw_only=True, slots=True)
class IpcReadOptions(_Weakrefable):
    ensure_native_endian: bool = field(default=True, kw_only=False)
    use_threads: bool = True
    include_fields: list[str] | None = None

class Message(_Weakrefable): ...
class MemoryPool(_Weakrefable): ...
class DataType(_Weakrefable): ...
class ListType(DataType): ...
class LargeListType(DataType): ...
class ListViewType(DataType): ...
class LargeListViewType(DataType): ...
class MapType(DataType): ...
class FixedSizeListType(DataType): ...
class StructType(DataType): ...
class DictionaryMemo(_Weakrefable): ...
class DictionaryType(DataType): ...
class TimestampType(DataType): ...
class Time32Type(DataType): ...
class Time64Type(DataType): ...
class DurationType(DataType): ...
class FixedSizeBinaryType(DataType): ...
class Decimal128Type(DataType): ...
class Decimal256Type(DataType): ...
class RunEndEncodedType(DataType): ...
class BaseExtensionType(DataType): ...
class ExtensionType(BaseExtensionType): ...
class FixedShapeTensorType(BaseExtensionType): ...
class PyExtensionType(ExtensionType): ...
class _Metadata(_Weakrefable): ...
class KeyValueMetadata(_Metadata): ...
class Field(_Weakrefable): ...
class Schema(_Weakrefable): ...
class Scalar(_Weakrefable): ...
class _PandasConvertible(_Weakrefable): ...
class Array(_PandasConvertible): ...
class Tensor(_Weakrefable): ...
class SparseCSRMatrix(_Weakrefable): ...
class SparseCSCMatrix(_Weakrefable): ...
class SparseCOOTensor(_Weakrefable): ...
class SparseCSFTensor(_Weakrefable): ...
class NullArray(Array): ...
class BooleanArray(Array): ...
class NumericArray(Array): ...
class IntegerArray(NumericArray): ...
class FloatingPointArray(NumericArray): ...
class Int8Array(IntegerArray): ...
class UInt8Array(IntegerArray): ...
class Int16Array(IntegerArray): ...
class UInt16Array(IntegerArray): ...
class Int32Array(IntegerArray): ...
class UInt32Array(IntegerArray): ...
class Int64Array(IntegerArray): ...
class UInt64Array(IntegerArray): ...
class HalfFloatArray(FloatingPointArray): ...
class FloatArray(FloatingPointArray): ...
class DoubleArray(FloatingPointArray): ...
class FixedSizeBinaryArray(Array): ...
class Decimal128Array(FixedSizeBinaryArray): ...
class Decimal256Array(FixedSizeBinaryArray): ...
class StructArray(Array): ...
class BaseListArray(Array): ...
class ListArray(BaseListArray): ...
class LargeListArray(BaseListArray): ...
class ListViewArray(BaseListArray): ...
class LargeListViewArray(BaseListArray): ...
class MapArray(ListArray): ...
class FixedSizeListArray(BaseListArray): ...
class UnionArray(Array): ...
class StringArray(Array): ...
class BinaryArray(Array): ...
class StringViewArray(Array): ...
class BinaryViewArray(Array): ...
class DictionaryArray(Array): ...
class ExtensionArray(Array): ...
class MonthDayNanoIntervalArray(Array): ...
class ChunkedArray(_PandasConvertible): ...
class _Tabular(_PandasConvertible): ...
class Table(_Tabular): ...
class RecordBatch(_Tabular): ...
class Device(_Weakrefable): ...
class MemoryManager(_Weakrefable): ...
class Buffer(_Weakrefable): ...
class ResizableBuffer(Buffer): ...
class NativeFile(_Weakrefable): ...
class BufferedInputStream(NativeFile): ...
class BufferedOutputStream(NativeFile): ...
class CompressedInputStream(NativeFile): ...
class CompressedOutputStream(NativeFile): ...
class _CRecordBatchWriter(_Weakrefable): ...
class RecordBatchReader(_Weakrefable): ...
class CacheOptions(_Weakrefable): ...

_Compression: TypeAlias = Literal[
    "gzip", "bz2", "brotli", "lz4", "lz4_frame", "lz4_raw", "zstd", "snappy"
]
_Buffer: TypeAlias = Buffer | bytes | memoryview | BufferProtocol

class Codec(_Weakrefable):
    def __init__(self, compression: _Compression, *, compression_level: int | None = None): ...
    @property
    def name(self) -> str: ...
    @property
    def compression_level(self) -> int: ...
    @staticmethod
    def default_compression_level(compression: _Compression) -> int: ...
    @classmethod
    def detect(cls, path: str | PathLike) -> Self: ...
    @classmethod
    def is_available(cls, compression: _Compression) -> bool: ...
    @classmethod
    def maximum_compression_level(cls, compression: _Compression) -> int: ...
    @classmethod
    def minimum_compression_level(cls, compression: _Compression) -> int: ...
    @classmethod
    def supports_compression_level(cls, compression: _Compression) -> bool: ...
    @overload
    def compress(
        self,
        buf: _Buffer,
        *,
        memory_pool: MemoryPool | None = None,
    ) -> Buffer: ...
    @overload
    def compress(
        self,
        buf: _Buffer,
        *,
        asbytes: Literal[False],
        memory_pool: MemoryPool | None = None,
    ) -> Buffer: ...
    @overload
    def compress(
        self,
        buf: _Buffer,
        *,
        asbytes: Literal[True],
        memory_pool: MemoryPool | None = None,
    ) -> bytes: ...
    @overload
    def decompress(
        self,
        buf: _Buffer,
        *,
        decompressed_size: int | None = None,
        memory_pool: MemoryPool | None = None,
    ) -> Buffer: ...
    @overload
    def decompress(
        self,
        buf: _Buffer,
        *,
        asbytes: Literal[False],
        decompressed_size: int | None = None,
        memory_pool: MemoryPool | None = None,
    ) -> Buffer: ...
    @overload
    def decompress(
        self,
        buf: _Buffer,
        *,
        asbytes: Literal[True],
        decompressed_size: int | None = None,
        memory_pool: MemoryPool | None = None,
    ) -> bytes: ...

class StopToken: ...
class ArrowException(Exception): ...
class ArrowCancelled(Exception): ...
class ArrowInvalid(Exception): ...
