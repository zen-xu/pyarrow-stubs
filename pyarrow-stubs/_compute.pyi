from typing import Any
from typing import Callable
from typing import ClassVar

import pyarrow.lib

from typing_extensions import Literal

namedtuple: Callable

class ArraySortOptions(_ArraySortOptions):
    def __init__(
        self,
        order: Literal["ascending", "descending"] = ...,
        *,
        null_placement: Literal["at_start", "at_end"] = ...,
    ) -> None: ...

class ArrowInvalid(ValueError, pyarrow.lib.ArrowException): ...

class AssumeTimezoneOptions(_AssumeTimezoneOptions):
    def __init__(
        self,
        timezone: str,
        *,
        ambiguous: Literal["raise", "earliest", "latest"] = ...,
        nonexistent: Literal["raise", "earliest", "latest"] = ...,
    ) -> None: ...

class CastOptions(_CastOptions):
    def __init__(
        self,
        target_type: pyarrow.lib.DataType | None = ...,
        *,
        allow_int_overflow: bool = ...,
        allow_time_truncate: bool = ...,
        allow_time_overflow: bool = ...,
        allow_decimal_truncate: bool = ...,
        allow_float_truncate: bool = ...,
        allow_invalid_utf8: bool = ...,
    ) -> None: ...
    @staticmethod
    def safe(target_type: pyarrow.lib.DataType | None = ...) -> CastOptions: ...
    @staticmethod
    def unsafe(target_type: pyarrow.lib.DataType | None = ...) -> CastOptions: ...

class CountOptions(_CountOptions):
    def __init__(self, mode: Literal["only_valid", "only_null", "all"] = ...) -> None: ...

class CumulativeSumOptions(_CumulativeSumOptions):
    def __init__(self, start: float, *, skip_nulls: bool = ...) -> None: ...

class DayOfWeekOptions(_DayOfWeekOptions):
    def __init__(
        self,
        *,
        count_from_zero: bool = ...,
        week_start: Literal[1, 2, 3, 4, 5, 6, 7] = ...,
    ) -> None: ...

class DictionaryEncodeOptions(_DictionaryEncodeOptions):
    def __init__(self, null_encoding: Literal["mask", "encode"] = ...) -> None: ...

class ElementWiseAggregateOptions(_ElementWiseAggregateOptions):
    def __init__(self, *, skip_nulls: bool = ...) -> None: ...

class Expression(pyarrow.lib._Weakrefable):
    def __init__(self) -> None: ...
    def _call(self, unicodefunction_name, listarguments, FunctionOptionsoptions=...) -> Any: ...
    @staticmethod
    def _deserialize(buffer: pyarrow.lib.Buffer) -> Expression: ...
    @staticmethod
    def _field(name_or_idx: str | int) -> Expression: ...
    @staticmethod
    def _nested_field(self, names: list[str]) -> Expression: ...
    def _scalar(self, value: pyarrow.lib.Scalar) -> Any: ...
    def cast(self, type=..., safe=..., options=...) -> Any: ...
    def equals(self, Expressionother) -> Any: ...
    def is_null(self, boolnan_is_null=...) -> Any: ...
    def is_valid(self) -> Any: ...
    def isin(self, values) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __and__(self, other) -> Any: ...
    def __bool__(self) -> bool: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __invert__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __or__(self, other) -> Any: ...
    def __radd__(self, other) -> Any: ...
    def __rand__(self, other) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __ror__(self, other) -> Any: ...
    def __rsub__(self, other) -> Any: ...
    def __rtruediv__(self, other) -> Any: ...
    def __sub__(self, other) -> Any: ...
    def __truediv__(self, other) -> Any: ...

class ExtractRegexOptions(_ExtractRegexOptions):
    def __init__(self, pattern) -> None: ...

class FilterOptions(_FilterOptions):
    def __init__(self, null_selection_behavior=...) -> None: ...

class Function(pyarrow.lib._Weakrefable):
    _kind_map: ClassVar[dict] = ...
    _doc: Any
    arity: Any
    kind: Any
    name: Any
    num_kernels: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def call(
        self, args, FunctionOptionsoptions=..., MemoryPoolmemory_pool=..., length=...
    ) -> Any: ...
    def __reduce__(self) -> Any: ...

class FunctionDoc(tuple):
    _asdict: ClassVar[function] = ...
    _field_defaults: ClassVar[dict] = ...
    _fields: ClassVar[tuple] = ...
    _replace: ClassVar[function] = ...
    __getnewargs__: ClassVar[function] = ...
    __match_args__: ClassVar[tuple] = ...
    __slots__: ClassVar[tuple] = ...
    arg_names: Any
    description: Any
    options_class: Any
    options_required: Any
    summary: Any
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def _make(cls, *args, **kwargs) -> Any: ...

class FunctionOptions(pyarrow.lib._Weakrefable):
    __hash__: ClassVar[None] = ...  # type: ignore
    __slots__: ClassVar[tuple] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def deserialize(self, buf) -> Any: ...
    def serialize(self) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class FunctionRegistry(pyarrow.lib._Weakrefable):
    def __init__(self, *args, **kwargs) -> None: ...
    def get_function(self, name) -> Any: ...
    def list_functions(self) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class HashAggregateFunction(Function):
    kernels: Any
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...

class HashAggregateKernel(Kernel):
    def __init__(self, *args, **kwargs) -> None: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class IndexOptions(_IndexOptions):
    def __init__(self, value) -> None: ...

class JoinOptions(_JoinOptions):
    def __init__(self, null_handling=..., null_replacement=...) -> None: ...

class Kernel(pyarrow.lib._Weakrefable):
    def __init__(self, *args, **kwargs) -> None: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class MakeStructOptions(_MakeStructOptions):
    def __init__(self, *args, **kwargs) -> None: ...

class MapLookupOptions(_MapLookupOptions):
    def __init__(self, query_key, occurrence) -> None: ...

class MatchSubstringOptions(_MatchSubstringOptions):
    def __init__(self, *args, **kwargs) -> None: ...

class MetaFunction(Function):
    kernels: Any
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...

class ModeOptions(_ModeOptions):
    def __init__(self, *args, **kwargs) -> None: ...

class NullOptions(_NullOptions):
    def __init__(self, *args, **kwargs) -> None: ...

class PadOptions(_PadOptions):
    def __init__(self, width, padding=...) -> None: ...

class PartitionNthOptions(_PartitionNthOptions):
    def __init__(self, *args, **kwargs) -> None: ...

class QuantileOptions(_QuantileOptions):
    def __init__(self, *args, **kwargs) -> None: ...

class RandomOptions(_RandomOptions):
    def __init__(self, *args, **kwargs) -> None: ...

class RankOptions(_RankOptions):
    def __init__(self, *args, **kwargs) -> None: ...

class ReplaceSliceOptions(_ReplaceSliceOptions):
    def __init__(self, start, stop, replacement) -> None: ...

class ReplaceSubstringOptions(_ReplaceSubstringOptions):
    def __init__(self, *args, **kwargs) -> None: ...

class RoundOptions(_RoundOptions):
    def __init__(self, ndigits=..., round_mode=...) -> None: ...

class RoundTemporalOptions(_RoundTemporalOptions):
    def __init__(self, *args, **kwargs) -> None: ...

class RoundToMultipleOptions(_RoundToMultipleOptions):
    def __init__(self, multiple=..., round_mode=...) -> None: ...

class ScalarAggregateFunction(Function):
    kernels: Any
    def __init__(self, *args, **kwargs) -> None: ...

class ScalarAggregateKernel(Kernel):
    def __init__(self, *args, **kwargs) -> None: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class ScalarAggregateOptions(_ScalarAggregateOptions):
    def __init__(self, *args, **kwargs) -> None: ...

class ScalarFunction(Function):
    kernels: Any
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...

class ScalarKernel(Kernel):
    def __init__(self, *args, **kwargs) -> None: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class ScalarUdfContext(pyarrow.lib._Weakrefable):
    batch_length: Any
    memory_pool: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class SelectKOptions(_SelectKOptions):
    def __init__(self, k, sort_keys) -> None: ...

class SetLookupOptions(_SetLookupOptions):
    def __init__(self, *args, **kwargs) -> None: ...

class SliceOptions(_SliceOptions):
    def __init__(self, start, stop=..., step=...) -> None: ...

class SortOptions(_SortOptions):
    def __init__(self, *args, **kwargs) -> None: ...

class SplitOptions(_SplitOptions):
    def __init__(self, *args, **kwargs) -> None: ...

class SplitPatternOptions(_SplitPatternOptions):
    def __init__(self, *args, **kwargs) -> None: ...

class StrftimeOptions(_StrftimeOptions):
    def __init__(self, format=..., locale=...) -> None: ...

class StrptimeOptions(_StrptimeOptions):
    def __init__(self, format, unit, error_is_null=...) -> None: ...

class StructFieldOptions(_StructFieldOptions):
    def __init__(self, indices) -> None: ...

class TDigestOptions(_TDigestOptions):
    def __init__(self, *args, **kwargs) -> None: ...

class TakeOptions(_TakeOptions):
    def __init__(self, *args, **kwargs) -> None: ...

class TrimOptions(_TrimOptions):
    def __init__(self, characters) -> None: ...

class Utf8NormalizeOptions(_Utf8NormalizeOptions):
    def __init__(self, form) -> None: ...

class VarianceOptions(_VarianceOptions):
    def __init__(self, *args, **kwargs) -> None: ...

class VectorFunction(Function):
    kernels: Any
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...

class VectorKernel(Kernel):
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class WeekOptions(_WeekOptions):
    def __init__(self, *args, **kwargs) -> None: ...

class _ArraySortOptions(FunctionOptions):
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def _set_options(self, order, null_placement) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class _AssumeTimezoneOptions(FunctionOptions):
    _ambiguous_map: ClassVar[dict] = ...
    _nonexistent_map: ClassVar[dict] = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def _set_options(self, timezone, ambiguous, nonexistent) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class _CastOptions(FunctionOptions):
    allow_decimal_truncate: Any
    allow_float_truncate: Any
    allow_int_overflow: Any
    allow_invalid_utf8: Any
    allow_time_overflow: Any
    allow_time_truncate: Any
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def _set_options(
        self,
        DataTypetarget_type,
        allow_int_overflow,
        allow_time_truncate,
        allow_time_overflow,
        allow_decimal_truncate,
        allow_float_truncate,
        allow_invalid_utf8,
    ) -> Any: ...
    def _set_safe(self) -> Any: ...
    def _set_type(self, target_type=...) -> Any: ...
    def _set_unsafe(self) -> Any: ...
    def is_safe(self) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class _CountOptions(FunctionOptions):
    _mode_map: ClassVar[dict] = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def _set_options(self, mode) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class _CumulativeSumOptions(FunctionOptions):
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def _set_options(self, start, skip_nulls) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class _DayOfWeekOptions(FunctionOptions):
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def _set_options(self, count_from_zero, week_start) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class _DictionaryEncodeOptions(FunctionOptions):
    _null_encoding_map: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def _set_options(self, null_encoding) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class _ElementWiseAggregateOptions(FunctionOptions):
    def __init__(self, *args, **kwargs) -> None: ...
    def _set_options(self, skip_nulls) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class _ExtractRegexOptions(FunctionOptions):
    def __init__(self, *args, **kwargs) -> None: ...
    def _set_options(self, pattern) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class _FilterOptions(FunctionOptions):
    _null_selection_map: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def _set_options(self, null_selection_behavior) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class _IndexOptions(FunctionOptions):
    def __init__(self, *args, **kwargs) -> None: ...
    def _set_options(self, scalar) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class _JoinOptions(FunctionOptions):
    _null_handling_map: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def _set_options(self, null_handling, null_replacement) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class _MakeStructOptions(FunctionOptions):
    def __init__(self, *args, **kwargs) -> None: ...
    def _set_options(self, field_names, field_nullability, field_metadata) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class _MapLookupOptions(FunctionOptions):
    _occurrence_map: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def _set_options(self, query_key, occurrence) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class _MatchSubstringOptions(FunctionOptions):
    def __init__(self, *args, **kwargs) -> None: ...
    def _set_options(self, pattern, ignore_case) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class _ModeOptions(FunctionOptions):
    def __init__(self, *args, **kwargs) -> None: ...
    def _set_options(self, n, skip_nulls, min_count) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class _NullOptions(FunctionOptions):
    def __init__(self, *args, **kwargs) -> None: ...
    def _set_options(self, nan_is_null) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class _PadOptions(FunctionOptions):
    def __init__(self, *args, **kwargs) -> None: ...
    def _set_options(self, width, padding) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class _PartitionNthOptions(FunctionOptions):
    def __init__(self, *args, **kwargs) -> None: ...
    def _set_options(self, pivot, null_placement) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class _QuantileOptions(FunctionOptions):
    _interp_map: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def _set_options(self, quantiles, interp, skip_nulls, min_count) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class _RandomOptions(FunctionOptions):
    def __init__(self, *args, **kwargs) -> None: ...
    def _set_options(self, initializer) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class _RankOptions(FunctionOptions):
    _tiebreaker_map: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def _set_options(self, sort_keys, null_placement, tiebreaker) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class _ReplaceSliceOptions(FunctionOptions):
    def __init__(self, *args, **kwargs) -> None: ...
    def _set_options(self, start, stop, replacement) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class _ReplaceSubstringOptions(FunctionOptions):
    def __init__(self, *args, **kwargs) -> None: ...
    def _set_options(self, pattern, replacement, max_replacements) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class _RoundOptions(FunctionOptions):
    def __init__(self, *args, **kwargs) -> None: ...
    def _set_options(self, ndigits, round_mode) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class _RoundTemporalOptions(FunctionOptions):
    def __init__(self, *args, **kwargs) -> None: ...
    def _set_options(
        self,
        multiple,
        unit,
        week_starts_monday,
        ceil_is_strictly_greater,
        calendar_based_origin,
    ) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class _RoundToMultipleOptions(FunctionOptions):
    def __init__(self, *args, **kwargs) -> None: ...
    def _set_options(self, multiple, round_mode) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class _ScalarAggregateOptions(FunctionOptions):
    def __init__(self, *args, **kwargs) -> None: ...
    def _set_options(self, skip_nulls, min_count) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class _SelectKOptions(FunctionOptions):
    def __init__(self, *args, **kwargs) -> None: ...
    def _set_options(self, k, sort_keys) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class _SetLookupOptions(FunctionOptions):
    def __init__(self, *args, **kwargs) -> None: ...
    def _set_options(self, value_set, boolskip_nulls) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class _SliceOptions(FunctionOptions):
    def __init__(self, *args, **kwargs) -> None: ...
    def _set_options(self, start, stop, step) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class _SortOptions(FunctionOptions):
    def __init__(self, *args, **kwargs) -> None: ...
    def _set_options(self, sort_keys, null_placement) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class _SplitOptions(FunctionOptions):
    def __init__(self, *args, **kwargs) -> None: ...
    def _set_options(self, max_splits, reverse) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class _SplitPatternOptions(FunctionOptions):
    def __init__(self, *args, **kwargs) -> None: ...
    def _set_options(self, pattern, max_splits, reverse) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class _StrftimeOptions(FunctionOptions):
    def __init__(self, *args, **kwargs) -> None: ...
    def _set_options(self, format, locale) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class _StrptimeOptions(FunctionOptions):
    _unit_map: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def _set_options(self, format, unit, error_is_null) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class _StructFieldOptions(FunctionOptions):
    def __init__(self, *args, **kwargs) -> None: ...
    def _set_options(self, indices) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class _TDigestOptions(FunctionOptions):
    def __init__(self, *args, **kwargs) -> None: ...
    def _set_options(self, quantiles, delta, buffer_size, skip_nulls, min_count) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class _TakeOptions(FunctionOptions):
    def __init__(self, *args, **kwargs) -> None: ...
    def _set_options(self, boundscheck) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class _TrimOptions(FunctionOptions):
    def __init__(self, *args, **kwargs) -> None: ...
    def _set_options(self, characters) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class _Utf8NormalizeOptions(FunctionOptions):
    _form_map: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def _set_options(self, form) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class _VarianceOptions(FunctionOptions):
    def __init__(self, *args, **kwargs) -> None: ...
    def _set_options(self, ddof, skip_nulls, min_count) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class _WeekOptions(FunctionOptions):
    def __init__(self, *args, **kwargs) -> None: ...
    def _set_options(
        self, week_starts_monday, count_from_zero, first_week_is_fully_in_year
    ) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class ordered_dict:
    __hash__: ClassVar[None] = ...  # type: ignore
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, *args, **kwargs) -> Any: ...
    def copy(self) -> dict: ...
    @classmethod
    def fromkeys(cls, *args, **kwargs) -> Any: ...
    def get(self, *args, **kwargs) -> Any: ...
    def items(self, *args, **kwargs) -> Any: ...
    def keys(self, *args, **kwargs) -> Any: ...
    def pop(self, *args, **kwargs) -> Any: ...
    def popitem(self, *args, **kwargs) -> Any: ...
    def setdefault(self, *args, **kwargs) -> Any: ...
    def update(self, *args, **kwargs) -> Any: ...
    def values(self, *args, **kwargs) -> Any: ...
    @classmethod
    def __class_getitem__(cls, *args, **kwargs) -> Any: ...
    def __contains__(self, other) -> Any: ...
    def __delitem__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getitem__(self, y) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __ior__(self, other) -> Any: ...
    def __iter__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __or__(self, other) -> Any: ...
    def __reversed__(self) -> Any: ...
    def __ror__(self, other) -> Any: ...
    def __setitem__(self, index, object) -> Any: ...
    def __sizeof__(self) -> Any: ...

def __pyx_unpickle_Kernel(__pyx_type, long__pyx_checksum, __pyx_state) -> Any: ...
def _deserialize(Bufferbuffer) -> Any: ...
def _get_scalar_udf_context(memory_pool, batch_length) -> Any: ...
def _group_by(args, keys, aggregations) -> Any: ...
def _min_count_doc(*args, **kwargs) -> Any: ...
def _raise_invalid_function_option(*args, **kwargs) -> Any: ...
def _skip_nulls_doc() -> Any: ...
def call_function(name, args, options=..., memory_pool=..., length=...) -> Any: ...
def frombytes(*args, **kwargs) -> Any: ...
def function_registry() -> Any: ...
def get_function(name) -> Any: ...
def list_functions() -> Any: ...
def register_scalar_function(func, function_name, function_doc, in_types, out_type) -> Any: ...
def tobytes(o) -> Any: ...
