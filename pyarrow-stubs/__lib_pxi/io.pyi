from typing import Generic, Literal, Self, TypeAlias, TypeVar, overload
from os import PathLike
from pyarrow._stubs_typing import Buffer as BufferProtocol
from pyarrow.lib import Buffer, _Weakrefable

from .types import KeyValueMetadata

def have_libhdfs() -> bool: ...
def io_thread_count() -> int: ...
def set_io_thread_count(count: int) -> None: ...

Mode: TypeAlias = Literal["rb", "wb", "rb+", "ab"]
_ModeT = TypeVar("_ModeT", bound=Mode)

class NativeFile(_Weakrefable, Generic[_ModeT]):
    _default_chunk_size: int

    def __enter__(self) -> Self: ...
    def __exit__(self, *args) -> None: ...
    @property
    def mode(self) -> _ModeT: ...
    @overload
    def readable(self: NativeFile[Literal["rb"]]) -> Literal[True]: ...
    @overload
    def readable(self: NativeFile[Literal["wb"]]) -> Literal[False]: ...
    @overload
    def readable(self: NativeFile[Literal["rb+"]]) -> Literal[True]: ...
    @overload
    def readable(self: NativeFile[Literal["ab"]]) -> Literal[False]: ...
    @overload
    def writeable(self: NativeFile[Literal["rb"]]) -> Literal[False]: ...
    @overload
    def writeable(self: NativeFile[Literal["rb+"]]) -> Literal[True]: ...
    @overload
    def writeable(self: NativeFile[Literal["wb"]]) -> Literal[True]: ...
    @overload
    def writeable(self: NativeFile[Literal["ab"]]) -> Literal[True]: ...
    def seekable(self) -> bool: ...
    def isatty(self) -> bool: ...
    def fileno(self) -> int: ...
    @property
    def closed(self) -> bool: ...
    def close(self) -> None: ...
    def size(self) -> int: ...
    def metadata(self) -> KeyValueMetadata: ...
    def tell(self) -> int: ...
    def seek(self, position: int, whence: int = 0) -> int: ...
    def flush(self) -> None: ...
    def write(
        self: NativeFile[Literal["wb"]] | NativeFile[Literal["ab"]] | NativeFile[Literal["rb+"]],
        data: bytes | BufferProtocol,
    ) -> int: ...
    def read(
        self: NativeFile[Literal["rb"]] | NativeFile[Literal["rb+"]], nbytes: int | None = None
    ) -> bytes: ...
    def get_stream(self, file_offset: int, nbytes: int) -> Self: ...
    def read_at(
        self: NativeFile[Literal["rb"]] | NativeFile[Literal["rb+"]], nbytes: int, offset: int
    ) -> bytes: ...
    def read1(
        self: NativeFile[Literal["rb"]] | NativeFile[Literal["rb+"]], nbytes: int | None
    ) -> bytes: ...
    def readall(self: NativeFile[Literal["rb"]] | NativeFile[Literal["rb+"]]) -> bytes: ...
    def readinto(
        self: NativeFile[Literal["rb"]] | NativeFile[Literal["rb+"]], b: BufferProtocol
    ) -> int: ...
    def readline(
        self: NativeFile[Literal["rb"]] | NativeFile[Literal["rb+"]], size: int | None = None
    ) -> bytes: ...
    def readlines(
        self: NativeFile[Literal["rb"]] | NativeFile[Literal["rb+"]], hint=None
    ) -> list[bytes]: ...
    def __iter__(self) -> Self: ...
    def __next__(self) -> bytes: ...
    def read_buffer(
        self: NativeFile[Literal["rb"]] | NativeFile[Literal["rb+"]], nbytes: int | None = None
    ) -> Buffer: ...
    def truncate(self) -> None: ...
    def writelines(
        self: NativeFile[Literal["wb"]] | NativeFile[Literal["ab"]] | NativeFile[Literal["rb+"]],
        lines: list[bytes],
    ): ...
    def download(self, stream_or_path: str | PathLike, buffer_size: int | None = None) -> None: ...
    def upload(self, stream: str | PathLike, buffer_size: int | None) -> None: ...
