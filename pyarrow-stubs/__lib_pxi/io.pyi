from os import PathLike
from typing import Literal, Self, TypeAlias

from pyarrow._stubs_typing import Buffer as BufferProtocol
from pyarrow.lib import Buffer, _Weakrefable

from .types import KeyValueMetadata

def have_libhdfs() -> bool: ...
def io_thread_count() -> int: ...
def set_io_thread_count(count: int) -> None: ...

Mode: TypeAlias = Literal["rb", "wb", "rb+", "ab"]

class NativeFile(_Weakrefable):
    _default_chunk_size: int

    def __enter__(self) -> Self: ...
    def __exit__(self, *args) -> None: ...
    @property
    def mode(self) -> Mode: ...
    def readable(self) -> bool: ...
    def seekable(self) -> bool: ...
    def isatty(self) -> bool: ...
    def fileno(self) -> int: ...
    @property
    def closed(self) -> bool: ...
    def close(self) -> None: ...
    def size(self) -> int: ...
    def metadata(self) -> KeyValueMetadata: ...
    def tell(self) -> int: ...
    def seek(self, position: int, whence: int = 0) -> int: ...
    def flush(self) -> None: ...
    def write(self, data: bytes | BufferProtocol) -> int: ...
    def read(
        self,
    ) -> bytes: ...
    def get_stream(self, file_offset: int, nbytes: int) -> Self: ...
    def read_at(self) -> bytes: ...
    def read1(self) -> bytes: ...
    def readall(self) -> bytes: ...
    def readinto(self, b: BufferProtocol) -> int: ...
    def readline(self, size: int | None = None) -> bytes: ...
    def readlines(self, hint=None) -> list[bytes]: ...
    def __iter__(self) -> Self: ...
    def __next__(self) -> bytes: ...
    def read_buffer(self, nbytes: int | None = None) -> Buffer: ...
    def truncate(self) -> None: ...
    def writelines(self, lines: list[bytes]): ...
    def download(self, stream_or_path: str | PathLike, buffer_size: int | None = None) -> None: ...
    def upload(self, stream: str | PathLike, buffer_size: int | None) -> None: ...
