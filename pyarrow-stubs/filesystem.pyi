from os import PathLike
from typing import Generator

from pyarrow import Table
from pyarrow import parquet
from pyarrow._gcsfs import GcsFileSystem
from pyarrow._s3fs import S3FileSystem

class FileSystem:
    def cat(self, path: str) -> bytes: ...
    def ls(self, path: str) -> list[str]: ...
    def delete(self, path: str, recursive: bool = ...) -> None: ...
    def disk_usage(self, path: str) -> int: ...
    def stat(self, path: str) -> dict: ...
    def rm(self, path: str, recursive: bool = ...): ...
    def mv(self, path: str, new_path: str): ...
    def rename(self, path: str, new_path: str) -> None: ...
    def mkdir(self, path: str, create_parents: bool = ...) -> None: ...
    def exists(self, path: str) -> bool: ...
    def isdir(self, path: str) -> bool: ...
    def isfile(self, path: str) -> bool: ...
    def read_parquet(
        self,
        path: str,
        columns: list[str] | None = ...,
        metadata: parquet.FileMetaData | None = ...,  # type: ignore
        schema: parquet.ParquetSchema | None = ...,  # type: ignore
        use_threads: bool = ...,
        use_pandas_metadata: bool = ...,
    ) -> Table: ...
    def open(self, path: str, mode: str = ...) -> None: ...
    @property
    def pathsep(self) -> str: ...

class LocalFileSystem(FileSystem):
    def __init__(self) -> None: ...
    @classmethod
    def get_instance(cls) -> LocalFileSystem: ...
    def walk(self, path: str) -> Generator[tuple[str, list[str], list[str]], None, None]: ...

class DaskFileSystem(FileSystem):
    fs: S3FileSystem | GcsFileSystem
    def __init__(self, fs: S3FileSystem | GcsFileSystem) -> None: ...

class S3FSWrapper(DaskFileSystem): ...

def resolve_filesystem_and_path(
    where: str | PathLike, filesystem: FileSystem | None = ...
) -> tuple[FileSystem | None, str]: ...
