import re

from typing import Any
from typing import overload

import pyarrow.lib

from typing_extensions import Literal

_HDFS_PATH_RE: re.Pattern

class HadoopFileSystem(pyarrow.lib._Weakrefable):
    extra_conf: dict
    host: Any
    is_open: bool
    kerb_ticket: Any
    port: int
    user: Any
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def chmod(self, path: str, mode: int) -> Any: ...
    def chown(self, path: str, owner: str = ..., group: str = ...) -> Any: ...
    def close(self) -> Any: ...
    @classmethod
    def connect(cls, *args, **kwargs) -> Any: ...
    def delete(self, path: str, recursive: bool = ...) -> Any: ...
    def df(self) -> int: ...
    def download(self, path: str, stream, buffer_size: int | None = ...) -> Any: ...
    def exists(self, path: str) -> bool: ...
    def get_capacity(self) -> int: ...
    def get_space_used(self) -> int: ...
    def info(self, path: str) -> dict: ...
    def isdir(self, path: str) -> bool: ...
    def isfile(self, path: str) -> bool: ...
    @overload
    def ls(self, path: str, full_info: Literal[True]) -> list[dict]: ...
    @overload
    def ls(self, path: str, full_info: Literal[False]) -> list[str]: ...
    def mkdir(self, path: str) -> None: ...
    def open(
        self,
        path: str,
        mode: Literal["rb", "wb", "ab"] = ...,
        buffer_size: int | None = ...,
        replication: int | None = ...,
        default_block_size: int | None = ...,
    ) -> HdfsFile: ...
    def rename(self, path: str, new_path: str) -> None: ...
    def stat(self, path: str) -> dict[str, Any]: ...
    def upload(self, path: str, stream, buffer_size: int | None = ...) -> None: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class HdfsFile(pyarrow.lib.NativeFile):
    buffer_size: int
    parent: _HdfsFileNanny | None
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class _HdfsFileNanny(pyarrow.lib._Weakrefable):
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

def have_libhdfs() -> bool: ...
def strip_hdfs_abspath(path: str) -> str: ...
