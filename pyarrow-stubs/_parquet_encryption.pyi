import datetime

from typing import Any
from typing import ClassVar

import pyarrow.lib

class ArrowException(Exception): ...

class CryptoFactory(pyarrow.lib._Weakrefable):
    __slots__: ClassVar[tuple] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def file_decryption_properties(
        self,
        KmsConnectionConfigkms_connection_config,
        DecryptionConfigurationdecryption_config=...,
    ) -> Any: ...
    def file_encryption_properties(
        self,
        KmsConnectionConfigkms_connection_config,
        EncryptionConfigurationencryption_config,
    ) -> Any: ...
    def remove_cache_entries_for_all_tokens(self) -> Any: ...
    def remove_cache_entries_for_token(self, access_token) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class DecryptionConfiguration(pyarrow.lib._Weakrefable):
    __slots__: ClassVar[tuple] = ...
    cache_lifetime: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class EncryptionConfiguration(pyarrow.lib._Weakrefable):
    __slots__: ClassVar[tuple] = ...
    cache_lifetime: Any
    column_keys: Any
    data_key_length_bits: Any
    double_wrapping: Any
    encryption_algorithm: Any
    footer_key: Any
    internal_key_material: Any
    plaintext_footer: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class KmsClient(pyarrow.lib._Weakrefable):
    def __init__(self, *args, **kwargs) -> None: ...
    def unwrap_key(self, wrapped_key, master_key_identifier) -> Any: ...
    def wrap_key(self, key_bytes, master_key_identifier) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class KmsConnectionConfig(pyarrow.lib._Weakrefable):
    __slots__: ClassVar[tuple] = ...
    custom_kms_conf: Any
    key_access_token: Any
    kms_instance_id: Any
    kms_instance_url: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def refresh_key_access_token(self, value) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class timedelta:
    max: ClassVar[datetime.timedelta] = ...
    min: ClassVar[datetime.timedelta] = ...
    resolution: ClassVar[datetime.timedelta] = ...
    days: Any
    microseconds: Any
    seconds: Any
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def total_seconds(self, *args, **kwargs) -> Any: ...
    def __abs__(self) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __bool__(self) -> Any: ...
    def __divmod__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __floordiv__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __mod__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __neg__(self) -> Any: ...
    def __pos__(self) -> Any: ...
    def __radd__(self, other) -> Any: ...
    def __rdivmod__(self, other) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __rfloordiv__(self, other) -> Any: ...
    def __rmod__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __rsub__(self, other) -> Any: ...
    def __rtruediv__(self, other) -> Any: ...
    def __sub__(self, other) -> Any: ...
    def __truediv__(self, other) -> Any: ...

def frombytes(*args, **kwargs) -> Any: ...
def tobytes(o) -> Any: ...
